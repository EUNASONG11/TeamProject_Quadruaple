<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.green.project_quadruaple.strf.StrfMapper">

    <select id="getDetail" resultMap="selLocation">
        SELECT a.strf_id as strfId, a.category , a.title as strfTitle ,
        a.lat as latit , a.lng as longitude
        a.address , a.post , a.tell , a.start_at as startAt,
        a.end_at , a.open , a.close
        , a.rest_date as restDate, a.explain , a.detail ,
        a.detail_title as locationName , a.busi_num as busiNum ,
        e.amenity ,e.title as amenityTitle ,
        f.price , f.menu_id as menuId , f.title as menuTitle ,
        f.menu_pic as menuPic , g.name as hostName ,
        g.pic as hostProfilePic , COUNT(user_id) as wishCnt ,
        AVG(rating) as ratingAvg

        FROM stay_tour_restaur_fest a
        JOIN location b
        ON a.location_id = b.location_id
        JOIN business_num c
        ON a.busi_num = c.busi_num
        JOIN amenipoint d
        ON a.strf_id = d.strf_id
        JOIN amenity e
        ON d.amenity_id = e.amenity_id
        JOIN menu f
        ON a.strf_id = f.strf_id
        JOIN user g
        ON g.user_id = c.user_id
        WHERE strf_id = #{strfId}
    </select>

    <resultMap id="selLocation" type="com.green.project_quadruaple.strf.model.StrfLocationList">
        <id property="locationDetailId" column="location_detail_id"/>
        <collection property="category" resultMap="selUserCategory"/>
    </resultMap>

    <resultMap id="selUserCategory" type="com.green.project_quadruaple.common.config.enumdata.StrfCategory">
        <id property="category" column="category"/>
    </resultMap>

    <select id="selReviewListWithCount" resultMap="reviewWithPicsMap">
        SELECT t.reviewId, t.strfId, t.userId, t.rating,
        t.content, q.name AS writerUserName, q.profile_pic AS writerUserPic,
        t.reviewCount,
        CASE
            WHEN t.updated_at IS NOT NULL THEN t.updated_at
            ELSE t.created_at
            END AS reviewWriteDate,
        GROUP_CONCAT(w.pic ORDER BY w.review_id SEPARATOR ',') AS reviewPics
        FROM (
        SELECT
        ROW_NUMBER() OVER (PARTITION BY a.strf_id ORDER BY a.review_id DESC) AS num,
        a.review_id AS reviewId, a.strf_id AS strfId, a.user_id AS userId,
        a.rating, a.content, a.created_at, a.updated_at,
        COUNT(a.review_id) OVER (PARTITION BY a.user_id) AS reviewCount
        FROM review a
        WHERE a.strf_id IN
        <foreach collection="reviewIds" item="item" open="(" separator="," close=")">
            #{item}
        </foreach>
        ) t
        JOIN user q
        ON t.user_id = q.user_id
        LEFT JOIN review_pic w
        ON t.reviewId = w.review_id
        WHERE t.num <![CDATA[ <= ]]> 4
        GROUP BY t.reviewId, t.strfId, t.userId, t.rating, t.content, q.name, q.profile_pic, t.reviewCount, t.created_at, t.updated_at
        ORDER BY t.reviewId DESC
    </select>

    <resultMap id="reviewWithPicsMap" type="com.green.project_quadruaple.strf.model.StrfSelReviewRes">
        <id property="reviewId" column="reviewId"/>
        <result property="strfId" column="strfId"/>
        <result property="userId" column="userId"/>
        <result property="rating" column="rating"/>
        <result property="content" column="content"/>
        <result property="reviewWriteDate" column="reviewWriteDate"/>
        <result property="reviewCount" column="reviewCount"/>
        <result property="writerUserName" column="writerUserName"/>
        <result property="writerUserPic" column="writerUserPic"/>
        <collection property="pictures" ofType="String">
            <result column="reviewPics"/>
        </collection>
    </resultMap>

    <update id="postBooking">
        UPDATE booking
        SET booking_id = #{bookingId}
        WHERE user_id = #{bookingUserId} and menu_id = #{menuId}
    </update>
</mapper>
