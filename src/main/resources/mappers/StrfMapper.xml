<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.green.project_quadruaple.strf.StrfMapper">

    <select id="getDetail" resultMap="strfDetailResultMap">
    SELECT
    a.strf_id AS strfId, a.category, a.title AS strfTitle,
    a.lat AS latit, a.lng AS longitude, a.address,
    a.post, a.tell, a.start_at AS startAt, a.end_at AS endAt,
    a.open_check as openCheck, a.close_check as closeCheck , a.rest_date AS restDate,
    a.`explain`, a.detail, a.busi_num AS busiNum,
    b.detail_title AS locationName, d.name AS hostName,
    d.profile_pic AS hostProfilePic, COUNT(DISTINCT f.user_id) AS wishCnt,
    AVG(e.rating) AS ratingAvg, j.inquired_at AS inquiredAt,
    h.amenity_id AS amenityId, i.title AS amenityTitle, g.menu_id AS menuId,
    g.title AS menuTitle, g.price AS menuPrice, g.menu_pic AS menuPic,
    l.pic_name AS strfPic ,
        IF(
        EXISTS(
        SELECT 1
        FROM wishlist
        WHERE strf_id = a.strf_id AND (#{userId} IS NULL OR user_id = #{userId})
        ), 1, 0
        ) AS wishIn ,
        IF(
        EXISTS(
        SELECT 1
        FROM recent
        WHERE j.user_id = d.user_id AND a.strf_id = #{strfId} AND j.undo_recent = 0
        ), 1, 0 ) AS recentCheck,
        CASE
        WHEN EXISTS(
        SELECT 1
        FROM recent
        WHERE j.user_id = d.user_id AND a.strf_id = #{strfId} AND j.undo_recent = 1
        ) THEN 0
        WHEN EXISTS(
        SELECT 1
        FROM recent
        WHERE j.user_id = #{userId} AND a.strf_id = #{strfId}
        ) THEN 1
        ELSE -1  -- 기본값으로 -1을 설정 , 실행 문제 있으면 null 로 변경
        END AS recentCheckStatus
        FROM
    stay_tour_restaur_fest a
    JOIN location_detail b ON a.location_detail_id = b.location_detail_id
    JOIN business_num c ON a.busi_num = c.busi_num
    LEFT JOIN menu g ON g.strf_id = a.strf_id
    LEFT JOIN `user` d ON c.user_id = d.user_id
    LEFT JOIN review e ON e.strf_id = a.strf_id
    LEFT JOIN amenipoint h ON h.strf_id = a.strf_id
    LEFT JOIN amenity i ON h.amenity_id = i.amenity_id
    LEFT JOIN wishlist f ON a.strf_id = f.strf_id
    LEFT JOIN recent j ON j.user_id = #{userId} AND j.strf_id = a.strf_id
    LEFT JOIN strf_pic l ON a.strf_id = l.strf_id
    LEFT JOIN wishlist w ON a.strf_id = w.strf_id AND w.user_id = #{userId}


    WHERE a.strf_id = #{strfId}
    AND (#{userId} IS NULL OR d.user_id = #{userId})
    GROUP BY
    a.strf_id, b.detail_title, d.name,
    d.profile_pic, h.amenity_id, g.menu_id, l.pic_name;
    </select>

    <resultMap id="strfDetailResultMap" type="com.green.project_quadruaple.strf.model.StrfDto">
        <id property="strfId" column="strfId" />
        <result property="category" column="category" />
        <result property="userId" column="userId" />
        <result property="strfTitle" column="strfTitle" />
        <result property="latit" column="latit" />
        <result property="longitude" column="longitude" />
        <result property="address" column="address" />
        <result property="post" column="post" />
        <result property="tell" column="tell" />
        <result property="startAt" column="startAt" />
        <result property="endAt" column="endAt" />
        <result property="openCheck" column="openCheck" />
        <result property="closeCheck" column="closeCheck" />
        <result property="restDate" column="restDate" />
        <result property="explain" column="explain" />
        <result property="detail" column="detail" />
        <result property="busiNum" column="busiNum" />
        <result property="locationName" column="locationName" />
        <result property="hostName" column="hostName" />
        <result property="hostProfilePic" column="hostProfilePic" />
        <result property="wishCnt" column="wishCnt" />
        <result property="ratingAvg" column="ratingAvg" />
        <result property="recentCheck" column="recentCheck" />
        <result property="inquiredAt" column="inquiredAt" />
        <result property="recentCheckStatus" column="recentCheckStatus" />
        <result property="wishIn" column="wishIn" />


        <collection property="amenities" ofType="com.green.project_quadruaple.strf.model.Amenity">
            <id property="amenityId" column="amenityId" />
            <result property="amenityTitle" column="amenityTitle" />
        </collection>

        <collection property="menu" ofType="com.green.project_quadruaple.strf.model.Menu">
            <id property="menuId" column="menuId" />
            <result property="menuTitle" column="menuTitle" />
            <result property="menuPrice" column="menuPrice" />
            <result property="menuPic" column="menuPic" />
        </collection>

        <collection property="strfPics" ofType="com.green.project_quadruaple.strf.model.StrfPicSel">
            <id property="strfId" column="strfId" />
            <result property="pic" column="strfPic" />
        </collection>
    </resultMap>

    <insert id="strfUpsert">
        INSERT INTO recent (user_id, strf_id, undo_recent, inquired_at)
        VALUES (#{userId}, #{strfId}, 0, NOW())
        ON DUPLICATE KEY UPDATE
        undo_recent = VALUES(undo_recent),
        inquired_at = NOW()

    </insert>


</mapper>
